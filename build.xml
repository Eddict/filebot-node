<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<project name="filebot-node" default="tar" xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:groovy="antlib:org.codehaus.groovy" xmlns:syno="antlib:net.filebot.ant.spk">
	<property file="profile.properties" />
	<property file="package.properties" />

	<!-- define source dirs -->
	<property name="dir.client" location="${basedir}/client-extjs" />
	<property name="dir.server" location="${basedir}/server-nodejs" />
	<property name="dir.package" location="${basedir}/package" />
	<property name="dir.build" location="${basedir}/build" />
	<property name="dir.lib" location="${basedir}/lib" />
	<property name="dir.dist" location="${basedir}/dist" />
	<property name="dir.release" location="${basedir}/release" />


	<target name="build" description="Build">
		<copy todir="${dir.build}/client" includeEmptyDirs="no">
			<fileset dir="${dir.client}">
				<exclude name="build/**" />
				<exclude name="bootstrap.*" />
			</fileset>
		</copy>
		<copy todir="${dir.build}/server" includeEmptyDirs="no">
			<fileset dir="${dir.server}">
				<exclude name="**/*.log" />
				<exclude name="**/test/**" />
			</fileset>
		</copy>

		<replace dir="${dir.build}" encoding="utf-8" summary="yes">
			<include name="client/app.json" />
			<include name="server/package.json" />
			<replacefilter token="0.0.0" value="${version}" />
		</replace>

		<!-- run sencha app build -->
		<exec executable="sencha" dir="${dir.build}/client">
			<arg line="app build production" />
		</exec>

		<copy todir="${dir.dist}/generic/client">
			<fileset dir="${dir.build}/client/build/production/FileBot">
				<include name="**/*.html" />
				<include name="**/*.css" />
				<include name="**/*.js" />
				<include name="**/*.json" />
				<include name="**/*.png" />
				<include name="**/*.gif" />
				<include name="**/*.svg" />
			</fileset>
		</copy>

		<copy todir="${dir.dist}/generic/server">
			<fileset dir="${dir.build}/server">
				<include name="**/*.js" />
				<include name="**/*.json" />
			</fileset>
		</copy>
	</target>


	<target name="tar" description="Build Generic Package">
		<tar destfile="${dir.dist}/${package}-${version}-generic.tar.xz" compression="xz" longfile="posix" encoding="utf-8">
			<tarfileset dir="${dir.dist}/generic" />
			<tarfileset dir="${dir.package}/generic" includes="*" filemode="755" />
		</tar>
	</target>


	<target name="spk" description="Build Synology Package">
		<syno:spk destdir="${dir.dist}" name="${package}" version="${version}" arch="noarch" compression="xz">
			<info name="displayname" value="FileBot Node" />
			<info name="description" value="FileBot Node allows you to execute and schedule filebot calls via Synology DSM. FileBot Node requires Node.js and FileBot." />
			<info name="maintainer" value="FileBot" />
			<info name="maintainer_url" value="http://www.filebot.net/" />
			<info name="distributor" value="FileBot" />
			<info name="distributor_url" value="http://www.filebot.net/" />
			<info name="support_url" value="https://github.com/filebot/filebot-node/issues" />
			<info name="helpurl" value="http://www.filebot.net/syno/support.html" />
			<info name="startable" value="yes" />
			<info name="silent_install" value="yes" />
			<info name="silent_upgrade" value="yes" />
			<info name="silent_uninstall" value="yes" />
			<info name="thirdparty" value="yes" />
			<info name="dsmappname" value="net.filebot.NodeClient" />
			<info name="dsmuidir" value="client" />
			<info name="firmware" value="6.0" />

			<!-- Dependencies are troublesome for some users because they cannot be skipped or ignored (i.e. DSM does not support optional or recommended dependencies) -->
			<!-- <info name="install_dep_packages" value="filebot:Node.js_v4" /> -->

			<icon size="72" file="${dir.package}/synology/package/client/images/filebot_node_72.png" />
			<icon size="256" file="${dir.package}/synology/package/client/images/filebot_node_256.png" />

			<!-- override generic server/start.sh with synology-specific configuration -->
			<package dir="${dir.dist}/generic" />
			<package dir="${dir.package}/synology/bin" filemode="755" />
			<package dir="${dir.package}/synology/package" />

			<scripts dir="${dir.package}/synology/scripts" filemode="755" />

			<codesign secring="${dir.package}/gpg/secring.gpg" keyid="${gpg.key}" password="${gpg.pwd}" />
		</syno:spk>
	</target>


	<target name="syno-repo" description="Update Synology Package Source" depends="stats">
		<syno:package-source file="${basedir}/syno.json">
			<keyring file="${dir.package}/gpg/FileBot.pub" />
			<spk file="${dir.dist}/${package}-${version}-noarch.spk">
				<info name="link" value="https://github.com/filebot/filebot-node/releases/download/${version}/${package}-${version}-noarch.spk" />
				<info name="download_count" value="${download_count}" />
				<thumbnail url="https://www.filebot.net/syno/filebot-node-thumbnail.png" />
				<snapshot url="https://www.filebot.net/syno/filebot-node-snapshot.png" />
			</spk>
		</syno:package-source>
	</target>


	<target name="qpkg" description="Build QNAP Package">
		<property name="dir.staging" location="${dir.dist}/qpkg" />
		<property name="dir.base" location="${dir.dist}/qpkg/shared" />

		<copy todir="${dir.staging}">
			<fileset dir="${dir.package}/qnap" />
		</copy>

		<copy todir="${dir.base}">
			<fileset dir="${dir.dist}/generic" />
		</copy>

		<!-- fix execute permissions -->
		<chmod verbose="yes" perm="+x">
			<fileset dir="${dir.base}" includes="*" />
		</chmod>

		<exec executable="docker" failonerror="yes">
			<arg line="run --rm -v ${dir.staging}:/src rednoah/qpkg-build --7zip --build-version ${version}" />
		</exec>
		<copy file="${dir.staging}/build/${package}_${version}.qpkg" tofile="${dir.dist}/${package}_${version}.qpkg" />
	</target>


	<target name="clean">
		<delete includeEmptyDirs="true" failonerror="false">
			<fileset defaultexcludes="false" dir="${dir.build}" />
			<fileset defaultexcludes="false" dir="${dir.dist}" />
			<fileset defaultexcludes="false" dir="${dir.release}" />
		</delete>
	</target>


	<target name="resolve" description="Retrieve dependencies with Apache Ivy">
		<delete dir="${dir.lib}" />
		<ivy:retrieve pattern="${dir.lib}/[artifact]-[type].[ext]" />
	</target>


	<target name="stats">
		<groovy:groovy src="build-stats.groovy" />
	</target>


</project>
